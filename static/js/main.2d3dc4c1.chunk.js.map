{"version":3,"sources":["Components/Navbar.js","Components/Employees.js","App.js","serviceWorker.js","index.js"],"names":["MyNavbar","Navbar","bg","variant","className","Brand","alt","src","width","height","Button","href","Form","inline","FormControl","type","placeholder","EmployeesComponent","useAxios","data","loading","error","console","log","results","array","Table","striped","bordered","hover","map","item","picture","large","name","first","last","phone","email","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"sSAMe,SAASA,IAEpB,OAAO,oCAEH,kBAACC,EAAA,EAAD,CAAQC,GAAG,OAAOC,QAAQ,QACtB,yBAAKC,UAAU,SACf,kBAACH,EAAA,EAAOI,MAAR,KACI,yBAAKC,IAAI,GAAGC,IAAI,YAAYC,MAAM,KAAKC,OAAO,KAAKL,UAAU,6BAA6B,IAD9F,uBAMA,yBAAKA,UAAU,SACX,kBAACM,EAAA,EAAD,CAAQP,QAAQ,OAAOQ,KAAK,SAA5B,kBAGJ,yBAAKP,UAAU,SACf,kBAACQ,EAAA,EAAD,CAAMC,QAAM,GACR,kBAACC,EAAA,EAAD,CAAaC,KAAK,OAAOC,YAAY,mBAAmBZ,UAAU,YAClE,kBAACM,EAAA,EAAD,CAAQP,QAAQ,gBAAhB,c,4BCrBD,SAASc,IAAqB,IAAD,EAEIC,YACxC,0CAHoC,0BAE/BC,EAF+B,EAE/BA,KAAMC,EAFyB,EAEzBA,QAASC,EAFgB,EAEhBA,MAFgB,KAMxC,GAAID,EAAS,OAAO,yCACpB,GAAIC,EAAO,OAAO,qCAElBC,QAAQC,IAAIJ,EAAKK,QAAQ,IAEzB,IAAMC,EAAQN,EAAKK,QAEnB,OAAO,oCACH,kBAACE,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAAC1B,QAAQ,QAC5C,+BACE,4BACE,uCACA,0CACA,yCACA,4CACA,uCAGJ,+BACCsB,EAAMK,KAAK,SAAAC,GAEV,OAAQ,oCACR,4BACM,4BAAI,yBAAKxB,IAAKwB,EAAKC,QAAQC,MAAO3B,IAAI,WACtC,4BAAKyB,EAAKG,KAAKC,OACf,4BAAKJ,EAAKG,KAAKE,MACf,4BAAKL,EAAKM,OACV,4BAAKN,EAAKO,eCtBLC,MAVf,WACE,OACE,oCACA,kBAACvC,EAAD,MACA,kBAACiB,EAAD,QCGgBuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAlC,GACLC,QAAQD,MAAMA,EAAMmC,c","file":"static/js/main.2d3dc4c1.chunk.js","sourcesContent":["import React from 'react';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Form from 'react-bootstrap/Form';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nexport default function MyNavbar(){\r\n\r\n    return <>\r\n\r\n        <Navbar bg=\"dark\" variant=\"dark\">\r\n            <div className='col-7'>\r\n            <Navbar.Brand>\r\n                <img alt=\"\" src=\"/logo.svg\" width=\"30\" height=\"30\" className=\"d-inline-block align-top\"/>{' '}\r\n                Employee Directory\r\n            </Navbar.Brand>\r\n            </div>\r\n            \r\n            <div className='col-2'>\r\n                <Button variant=\"info\" href='#home'>All Employees</Button>\r\n            </div>\r\n\r\n            <div className='col-3'>\r\n            <Form inline>\r\n                <FormControl type=\"text\" placeholder=\"Employee Name...\" className=\"mr-sm-2\" />\r\n                <Button variant=\"outline-info\">Search</Button>\r\n            </Form>\r\n            </div>\r\n\r\n        </Navbar>\r\n\r\n    </>\r\n}","import React, { useState, useEffect } from 'react';\r\nimport Table from 'react-bootstrap/Table';\r\nimport useAxios from 'axios-hooks'\r\n\r\nexport default function EmployeesComponent(){\r\n\r\n    const [{ data, loading, error }, refetch] = useAxios(\r\n        'https://randomuser.me/api/?results=100'\r\n    )\r\n\r\n    if (loading) return <p>Loading...</p>\r\n    if (error) return <p>Error!</p>\r\n\r\n    console.log(data.results[0])\r\n\r\n    const array = data.results;\r\n    \r\n    return <>\r\n        <Table striped bordered hover variant=\"dark\">\r\n  <thead>\r\n    <tr>\r\n      <th>Picture</th>\r\n      <th>First Name</th>\r\n      <th>Last Name</th>\r\n      <th>Phone Number</th>\r\n      <th>Email</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n  {array.map( item => {\r\n    \r\n    return  <>\r\n    <tr>\r\n          <td><img src={item.picture.large} alt='Error'/></td>\r\n          <td>{item.name.first}</td>\r\n          <td>{item.name.last}</td>\r\n          <td>{item.phone}</td>\r\n          <td>{item.email}</td>\r\n    </tr>\r\n    </>\r\n    })}\r\n  </tbody>\r\n</Table>\r\n    </>\r\n}","import React from 'react';\nimport './App.css';\nimport MyNavbar from './Components/Navbar';\nimport EmployeesComponent from './Components/Employees';\n\nfunction App() {\n  return (\n    <>\n    <MyNavbar />\n    <EmployeesComponent />\n\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}